// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tickers.Infrastructure;

#nullable disable

namespace Tickers.Infrastructure.Migrations
{
    [DbContext(typeof(TickerContext))]
    [Migration("20250708130655_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ticker")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tickers.Domain.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Close")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("Dividends")
                        .HasColumnType("real");

                    b.Property<float>("High")
                        .HasColumnType("real");

                    b.Property<Guid?>("IntervalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Low")
                        .HasColumnType("real");

                    b.Property<float>("Open")
                        .HasColumnType("real");

                    b.Property<float>("StockSplits")
                        .HasColumnType("real");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("IntervalId");

                    b.ToTable("Candles", "ticker");
                });

            modelBuilder.Entity("Tickers.Domain.Intervals.Interval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TickerSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IntervalType");

                    b.HasIndex("TickerSymbol");

                    b.ToTable("Intervals", "ticker");
                });

            modelBuilder.Entity("Tickers.Domain.Ticker", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Symbol");

                    b.ToTable("Tickers", "ticker");
                });

            modelBuilder.Entity("Tickers.Domain.Candle", b =>
                {
                    b.HasOne("Tickers.Domain.Intervals.Interval", null)
                        .WithMany("Candles")
                        .HasForeignKey("IntervalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tickers.Domain.Intervals.Interval", b =>
                {
                    b.HasOne("Tickers.Domain.Ticker", null)
                        .WithMany("Intervals")
                        .HasForeignKey("TickerSymbol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tickers.Domain.Intervals.Interval", b =>
                {
                    b.Navigation("Candles");
                });

            modelBuilder.Entity("Tickers.Domain.Ticker", b =>
                {
                    b.Navigation("Intervals");
                });
#pragma warning restore 612, 618
        }
    }
}
